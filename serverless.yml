# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: serverless-stripe-backend

# Configuration variables
custom:
  secrets: ${file(secrets.json)}

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs8.10
  # stage: prod
  stage: dev
  # profile: personal
  region: ap-east-1
  environment:
    GDC_EMAIL: ${self:custom.secrets.gdcEmail} # Google sheets secret API key
    GDC_SECRET_KEY: ${self:custom.secrets.gdcSecretKey} # Google sheets secret API key
    SHEETS_SECRET_KEY: ${self:custom.secrets.sheetsSecretKey} # Google sheets secret API key
    STRIPE_SECRET_KEY: ${self:custom.secrets.stripeSecretKey} # Stripe secret API key
    AUTH_CLIENT_ID: ${self:custom.secrets.authClientId} # Stripe secret API key
    AUTH_CLIENT_SECRET: ${self:custom.secrets.authClientSecret} # Stripe secret API key

# The `functions` block defines what code to deploy
functions:
  auth:
    handler: functions/auth.handler
    cors: true
  checkLedger:
    handler: functions/checkLedger.handler
    events:
      - http:
          path: ledger
          method: get
          authorizer: auth
          cors: true
  createUser:
    handler: functions/createUser.handler
    events:
      - http:
          path: users
          method: post
          cors: true
  createCharge:
    handler: functions/createCharge.handler
    events:
      - http:
          path: charges
          method: post
          cors: true
  createSource:
    handler: functions/createSource.handler
    events:
      - http:
          path: sources
          method: post
          cors: true
  sourceStatus:
    handler: functions/checkSource.handler
    events:
      - http:
          path: status
          method: get
          cors: true

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
